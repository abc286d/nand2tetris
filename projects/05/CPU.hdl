// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=isA);
    Mux16(a=aluOut, b=instruction, sel=isA, out=muxOut1);

    // Get control bit for registerA
    Or(a=isA, b=instruction[5], out=loadRegisterA);
    ARegister(in=muxOut1, load=loadRegisterA, out=registerA, out[0..14]=addressM);

    // Get control bit for registerD
    And(a=instruction[15], b=instruction[4], out=loadRegisterD);
    DRegister(in=aluOut, load=loadRegisterD, out=registerD);

    // Get control bit for M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Determine the second input of the ALU
    Mux16(a=registerA, b=inM, sel=instruction[12], out=muxOut2);

    ALU(x=registerD, y=muxOut2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=outM, out=aluOut, zr=zr, ng=ng);

    // Calculate when to load new address, i.e. do jump
    And(a=ng, b=instruction[2], out=condition1);
    And(a=zr, b=instruction[1], out=condition2);
    Or(a=zr, b=ng, out=lessThanEqualToZero);
    Not(in=lessThanEqualToZero, out=greaterThanZero);
    And(a=greaterThanZero, b=instruction[0], out=condition3);
    Or(a=condition1, b=condition2, out=temp);
    Or(a=temp, b=condition3, out=loadFlagWhenC);

    // If it's A command, never jump
    And(a=instruction[15], b=loadFlagWhenC, out=loadFlag);

    // Calculate when to inc
    Not(in=loadFlag, out=incFlag);

    PC(in=registerA, load=loadFlag, inc=incFlag, reset=reset, out[0..14]=pc);
}